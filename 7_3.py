# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, v):
        self.unit_n = v

    def __add__(self, other):
        res = self.unit_n + other.unit_n
        return Cell(res)

    def __sub__(self, other):
        res = self.unit_n - other.unit_n
        if res > 0:
            return Cell(res)
        else:
            print('Операция не возможна !!!')

    def __mul__(self, other):
        res = self.unit_n * other.unit_n
        return Cell(res)

    def __truediv__(self, other):
        res = self.unit_n // other.unit_n
        return Cell(res)

    def make_order(self, x):
        res = ''
        self.n_units_row = x
        full_row_num = self.unit_n // self.n_units_row
        for i in range(full_row_num):
            res_str = str('*' * self.n_units_row + '\n')
            res += res_str
        unit_modulo = self.unit_n % self.n_units_row
        mod_str = str('*' * unit_modulo + '\n')
        res += mod_str
        return f'{res}'


cell_1 = Cell(10)

cell_2 = Cell(3)

cell_3 = cell_1 + cell_2
cell_4 = cell_2 - cell_1
cell_5 = cell_1 - cell_2
cell_6 = cell_1 / cell_2
order_cell = cell_1.make_order(4)

print(cell_3.unit_n)
print(cell_5.unit_n)
print(cell_6.unit_n)
print(order_cell)
