# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод
# __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде
# прямоугольной схемы.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в
# привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
# объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой
# строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:

    def __init__(self, *args):
        self.m_values = [*args]

    def __str__(self):
        s = ''
        for i in range(len(self.m_values)):
            row = str(self.m_values[i]) + str('\n')
            s += row
        s = s.replace(',', ' ')
        s = s.replace('[', ' ')
        s = s.replace(']', ' ')
        return s

    def __add__(self, other):
        el = []
        for i in range(len(self.m_values)):
            h = []
            for j in range(len(self.m_values[i])):
                t = self.m_values[i][j] + other.m_values[i][j]
                h.append(t)
            el.append(h)
        c = Matrix(*el)
        return c

test_matrx = Matrix([1, 2, 3], [2, 2, 3], [1, 2, 3], [1, 3, 4], [2, 2, 1])

print(test_matrx)

Matrx_1 = Matrix([1, 0, 2], [1, 1, 1], [1, 1, 1])
Matrx_2 = Matrix([1, 2, 3], [1, 1, 1], [1, 1, 1])
Matrx_3 = Matrix([1, 1, 1], [1, 1, 1], [1, 1, 1])

m_sum = Matrx_1 + Matrx_2 + Matrx_3
print(m_sum)




